{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"names":["module","exports","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","DialogItem","id","className","s","dialog","active","to","Message","message","Dialogs","DialogElements","state","dialogs","map","d","MessagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dialogsPage","dispatch","action","sendMessageCreator","Component","RedirectComponent","this","isAuth","React","auth"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,oBCA/DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,4B,oBCA7GD,EAAOC,QAAU,CAAC,QAAU,2B,6FCGtBC,EAAcC,YAAiB,IAUtBC,cAAU,CAACC,KAAM,WAAjBD,EATQ,SAACE,GACpB,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,YAAY,qBAAqBC,KAAK,iBAAiBC,UAAWC,IAAUC,SAAU,CAACC,IAAUb,OAC7G,8BAAK,kD,0BCIFc,EATI,SAACV,GACSA,EAAMW,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIhB,EAAb,SAAqBA,EAAMK,U,oCCAxBY,EANC,SAACjB,GACb,OACI,qBAAKY,UAAWC,IAAEK,QAAlB,SAA4BlB,EAAMkB,WCoB3BC,EAnBC,SAACnB,GACb,IAGIoB,EAAiBpB,EAAMqB,MAAMC,QAAQC,KAAI,SAAAC,GAAC,OAAK,cAAC,EAAD,CAAuBnB,KAAMmB,EAAEnB,KAAMM,GAAIa,EAAEb,IAA1Ba,EAAEb,OAClEc,EAAmBzB,EAAMqB,MAAMK,SAASH,KAAI,SAAAI,GAAC,OAAK,cAAC,EAAD,CAAoBT,QAASS,EAAET,SAAjBS,EAAEhB,OACtE,OACI,sBAAKC,UAAWC,IAAES,QAAlB,UACI,qBAAKV,UAAWC,IAAEe,aAAlB,SACKR,IAEL,sBAAKR,UAAWC,IAAEa,SAAlB,UACI,8BAAMD,IACN,cAAC,EAAD,CAAgBxB,SAZN,SAAC4B,GACnB7B,EAAM8B,YAAYD,EAAOE,0B,8ECalBC,sBAAQC,aAdD,SAACZ,GACnB,MAAO,CACHA,MAAOA,EAAMa,gBAGI,SAACC,GACtB,MAAO,CACHL,YAAa,SAACC,GACV,IAAIK,EAASC,YAAmBN,GAChCI,EAASC,SCXW,SAACE,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKxC,MAAMyC,OAEZ,8BACI,cAACH,EAAD,eAAeE,KAAKxC,UAHG,cAAC,IAAD,CAAUgB,GAAG,eAHT,GACX0B,IAAMJ,WAiBtC,OADqCL,aANJ,SAACZ,GAC9B,MAAO,CACHoB,OAAQpB,EAAMsB,KAAKF,UAIUR,CAAoCM,KDD9DP,CAAwEb","file":"static/js/4.48d33bfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3A-EY\",\"active\":\"DialogItem_active__3OGEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1SC5k\",\"dialogsItems\":\"Dialogs_dialogsItems__3Pibb\",\"messages\":\"Dialogs_messages__2MZGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__qyFrw\"};","import { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormControls/FormControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field placeholder=\"Enter your message\" name=\"newMessageBody\" component={Textarea} validate={[required, maxLength50]}/></div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: \"message\"})(AddMessageForm);","\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './DialogItem.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={props}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs = (props) => {\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n    let DialogElements = props.state.dialogs.map(d => (<DialogItem key={d.id} name={d.name} id={d.id} />))\r\n    let MessagesElements = props.state.messages.map(m => (<Message key={m.id} message={m.message} />))\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {DialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{MessagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            let action = sendMessageCreator(newMessageBody);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\"></Redirect>\r\n            return (\r\n                <div>\r\n                    <Component {...this.props} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    let mapStateToPropsForRedirect = (state) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"sourceRoot":""}